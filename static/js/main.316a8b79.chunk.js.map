{"version":3,"sources":["context/myContext.js","services/fetchApi.js","context/myProvider.jsx","components/Table.jsx","components/SearchInputs.jsx","App.js","index.js"],"names":["context","createContext","fetchApi","setState","fetch","response","json","prevState","data","Provider","children","useState","filterByName","name","filteredResults","filterByNumericValues","actualFilter","column","comparison","value","allFilters","numericResults","filtersIndex","columns","state","contextValue","useEffect","Table","useContext","MyContext","results","createTable","listToRender","map","obj","i","key","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","films","film","created","edited","url","item","undefined","length","SearchInput","handleFiltersChange","target","id","compareValues","arrToCompare","valueToSave","newFilteredResult","filter","Number","removeFilterOnClick","selectedColumn","parentElement","innerText","split","console","log","indexOf","className","htmlFor","type","data-testid","onChange","includes","placeholder","option","nanoid","min","onClick","ababa","e","ababa2","e2","abaaaba","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.316a8b79.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst context = createContext();\n\nexport default context;\n","const FETCH_URL = 'https://swapi-trybe.herokuapp.com/api/planets/';\n\nconst fetchApi = async (setState) => {\n  const response = await fetch(FETCH_URL);\n  const json = await response.json();\n  return setState((prevState) => ({ ...prevState, data: json }));\n};\n\nexport default fetchApi;\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport MyContext from './myContext';\nimport fetchApi from '../services/fetchApi';\n\nfunction Provider({ children }) {\n  const INITIAL_STATE = {\n    data: {},\n    filterByName: {\n      name: '',\n      filteredResults: {},\n    },\n    filterByNumericValues: {\n      actualFilter: {\n        column: 'population',\n        comparison: 'maior que',\n        value: 0,\n      },\n      allFilters: [],\n      numericResults: [],\n      filtersIndex: [],\n    },\n    columns: [\n      'population',\n      'orbital_period',\n      'diameter',\n      'rotation_period',\n      'surface_water',\n    ],\n  };\n\n  const [state, setState] = useState(INITIAL_STATE);\n\n  const contextValue = {\n    state,\n    setState,\n  };\n\n  useEffect(() => {\n    fetchApi(setState);\n  }, []);\n\n  return (\n    <MyContext.Provider value={ contextValue }>\n      {children}\n    </MyContext.Provider>\n  );\n}\n\n// Validação de children com auxílio da documentação do React:\n// https://pt-br.reactjs.org/docs/typechecking-with-proptypes.html\nProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Provider;\n","import React, { useContext } from 'react';\nimport MyContext from '../context/myContext';\nimport './table.css';\n\nfunction Table() {\n  const {\n    state: {\n      data: { results },\n      filterByName: { name, filteredResults },\n      filterByNumericValues: { numericResults },\n    },\n  } = useContext(MyContext);\n  const tableHeadsList = [\n    'Name',\n    'Rotation Period',\n    'Orbital Period',\n    'Diameter',\n    'Climate',\n    'Gravity',\n    'Terrain',\n    'Surface Water',\n    'Population',\n    'Films',\n    'Created',\n    'Edited',\n    'URL',\n  ];\n\n  const createTable = (listToRender) => (listToRender.map((obj, i) => (\n    <tr key={ i + 1 }>\n      <td>{obj.name}</td>\n      <td>{obj.rotation_period}</td>\n      <td>{obj.orbital_period}</td>\n      <td>{obj.diameter}</td>\n      <td>{obj.climate}</td>\n      <td>{obj.gravity}</td>\n      <td>{obj.terrain}</td>\n      <td>{obj.surface_water}</td>\n      <td>{obj.population}</td>\n      <td>{obj.films.map((film) => film)}</td>\n      <td>{obj.created}</td>\n      <td>{obj.edited}</td>\n      <td>{obj.url}</td>\n    </tr>)));\n\n  return (\n    <table>\n      <thead>\n        <tr>\n          {tableHeadsList.map((item) => <th key={ item }>{item}</th>)}\n        </tr>\n      </thead>\n      <tbody>\n        { (() => {\n          if (name !== '') {\n            return createTable(filteredResults);\n          } if (results !== undefined && numericResults.length === 0) {\n            return createTable(results);\n          } if (numericResults.length > 0) {\n            return createTable(numericResults[numericResults.length - 1]);\n          }\n        })() }\n      </tbody>\n    </table>\n  );\n}\n\nexport default Table;\n","import React, { useContext } from 'react';\nimport { nanoid } from 'nanoid';\nimport MyContext from '../context/myContext';\nimport './searchInput.css';\n\n// let columnOptions = [\n//   'population',\n//   'orbital_period',\n//   'diameter',\n//   'rotation_period',\n//   'surface_water',\n// ];\n\nfunction SearchInput() {\n  const {\n    state: {\n      data: { results },\n      filterByName: { name },\n      filterByNumericValues: { actualFilter, allFilters, numericResults },\n      columns,\n    },\n    setState,\n  } = useContext(MyContext);\n\n  const handleSearchChange = ({ target: { value } }) => {\n    const filteredResults = results.filter((obj) => (\n      obj.name.includes(value)\n    ));\n\n    setState((prevState) => ({\n      ...prevState,\n      filterByName: { name: value, filteredResults },\n    }));\n  };\n\n  const handleFiltersChange = ({ target: { id, value } }) => {\n    if (id === 'column-filter') {\n      setState((prevState) => ({\n        ...prevState,\n        filterByNumericValues: {\n          ...prevState.filterByNumericValues,\n          actualFilter: { ...prevState.filterByNumericValues.actualFilter,\n            column: value },\n        },\n      }));\n    } else if (id === 'comparison-filter') {\n      setState((prevState) => ({\n        ...prevState,\n        filterByNumericValues: {\n          ...prevState.filterByNumericValues,\n          actualFilter: { ...prevState.filterByNumericValues.actualFilter,\n            comparison: value },\n        },\n      }));\n    } else {\n      setState((prevState) => ({\n        ...prevState,\n        filterByNumericValues: {\n          ...prevState.filterByNumericValues,\n          actualFilter: { ...prevState.filterByNumericValues.actualFilter, value },\n        },\n      }));\n    }\n  };\n\n  const saveValuesToState = (valueToSave) => (\n    setState((prevState) => ({\n      ...prevState,\n      filterByNumericValues: {\n        ...prevState.filterByNumericValues,\n        allFilters: [...prevState.filterByNumericValues.allFilters,\n          prevState.filterByNumericValues.actualFilter],\n        numericResults: [\n          ...prevState.filterByNumericValues.numericResults,\n          valueToSave],\n      },\n    }))\n  );\n\n  const compareValues = (arrToCompare) => {\n    const newFilteredResult = arrToCompare.filter((obj) => {\n      switch (actualFilter.comparison) {\n      case 'maior que':\n        return Number(obj[actualFilter.column]) > Number(actualFilter.value);\n      case 'menor que':\n        return Number(obj[actualFilter.column]) < Number(actualFilter.value);\n      case 'igual a':\n        return Number(obj[actualFilter.column]) === Number(actualFilter.value);\n      default: return results;\n      }\n    });\n    saveValuesToState(newFilteredResult);\n  };\n\n  // const setFiltersIndex = () => {\n  //   setState((prevState) => ({\n  //     ...prevState,\n  //     filterByNumericValues: {\n  //       ...prevState.filterByNumericValues,\n  //       filtersIndex: [\n  //         ...prevState.filterByNumericValues.filtersIndex,\n  //         prevState.filterByNumericValues.filtersIndex.length,\n  //       ],\n  //     },\n  //   }));\n  // };\n\n  const abaaaba = () => {\n    if (allFilters.length > 0) {\n      const ababa = columns\n        .filter((e) => e !== actualFilter.column);\n      setState((prevState) => ({\n        ...prevState,\n        columns: ababa,\n      }));\n    } else {\n      const ababa2 = columns\n        .filter((e2) => e2 !== actualFilter.column);\n      setState((prevState) => ({\n        ...prevState,\n        columns: ababa2,\n      }));\n    }\n  };\n\n  const handleClick = () => {\n    // Filtrar os resultados com os valores passados e salvá-los no estado\n    if (numericResults.length === 0) {\n      compareValues(results);\n      // setFiltersIndex();\n    } else {\n      compareValues(numericResults[numericResults.length - 1]);\n      // setFiltersIndex();\n    }\n    abaaaba();\n  };\n\n  const removeFilterOnClick = ({ target }) => {\n    if (target.id === 'removeAllFilters') {\n      return (\n        setState((prevState) => ({\n          ...prevState,\n          filterByNumericValues: {\n            actualFilter: {\n              column: 'population',\n              comparison: 'maior que',\n              value: 0,\n            },\n            allFilters: [],\n            numericResults: [],\n          },\n          columns: [\n            'population',\n            'orbital_period',\n            'diameter',\n            'rotation_period',\n            'surface_water',\n          ],\n        }))\n      );\n    }\n    const selectedColumn = target.parentElement.innerText.split(' ')[0];\n    console.log(numericResults.indexOf({ column: selectedColumn }));\n  };\n\n  return (\n    <div>\n      <form className=\"colum-filter-form\">\n        <label htmlFor=\"name-filter\">\n          <span className=\"select-label-text\">Pesquisar</span>\n          <input\n            type=\"text\"\n            data-testid=\"name-filter\"\n            id=\"name-filter\"\n            value={ name }\n            onChange={ handleSearchChange }\n            placeholder=\"Pesquisar...\"\n          />\n        </label>\n        <label htmlFor=\"column-filter\">\n          <span className=\"select-label-text\">Coluna</span>\n          <select\n            id=\"column-filter\"\n            data-testid=\"column-filter\"\n            onChange={ handleFiltersChange }\n          >\n            { columns.map((option) => (\n              <option key={ nanoid() } value={ option }>{ option }</option>\n            ))}\n          </select>\n        </label>\n        <label htmlFor=\"comparison-filter\">\n          <select\n            id=\"comparison-filter\"\n            data-testid=\"comparison-filter\"\n            onChange={ handleFiltersChange }\n          >\n            <option value=\"maior que\">maior que</option>\n            <option value=\"menor que\">menor que</option>\n            <option value=\"igual a\">igual a</option>\n          </select>\n        </label>\n        <label htmlFor=\"value-filter\">\n          <input\n            type=\"number\"\n            data-testid=\"value-filter\"\n            placeholder=\"Digite um valor\"\n            min=\"0\"\n            value={ actualFilter.value }\n            onChange={ handleFiltersChange }\n          />\n        </label>\n        <button\n          type=\"button\"\n          data-testid=\"button-filter\"\n          onClick={ handleClick }\n        >\n          Filtrar\n        </button>\n      </form>\n\n      { allFilters.length > 0 && allFilters.map(\n        (e) => (\n          <div key={ nanoid() }>\n            {`${e.column} ${e.comparison} ${e.value}`}\n            <button\n              type=\"button\"\n              data-testid=\"filter\"\n              onClick={ removeFilterOnClick }\n            >\n              X\n            </button>\n          </div>\n        ),\n      ) }\n      <button\n        type=\"button\"\n        id=\"removeAllFilters\"\n        data-testid=\"button-remove-filters\"\n        onClick={ removeFilterOnClick }\n      >\n        Remover todas filtragens\n      </button>\n    </div>\n  );\n}\n\nexport default SearchInput;\n","import React from 'react';\nimport Provider from './context/myProvider';\nimport './App.css';\nimport Table from './components/Table';\nimport SearchInput from './components/SearchInputs';\n\nfunction App() {\n  return (\n    <Provider>\n      <h1>Projeto Star Wars - Trybe</h1>\n      <SearchInput />\n      <Table />\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}